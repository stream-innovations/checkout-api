// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: payment.sql

package repository

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO payments (
    external_id, 
    destination_wallet, 
    destination_mint,
    amount, 
    status, 
    message, 
    expires_at
) 
VALUES (
    $1, 
    $2, 
    $3,
    $4, 
    $5, 
    $6, 
    $7
)
RETURNING id, external_id, destination_wallet, destination_mint, amount, status, message, expires_at, created_at, updated_at
`

type CreatePaymentParams struct {
	ExternalID        sql.NullString `json:"external_id"`
	DestinationWallet string         `json:"destination_wallet"`
	DestinationMint   string         `json:"destination_mint"`
	Amount            int64          `json:"amount"`
	Status            PaymentStatus  `json:"status"`
	Message           sql.NullString `json:"message"`
	ExpiresAt         sql.NullTime   `json:"expires_at"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.queryRow(ctx, q.createPaymentStmt, createPayment,
		arg.ExternalID,
		arg.DestinationWallet,
		arg.DestinationMint,
		arg.Amount,
		arg.Status,
		arg.Message,
		arg.ExpiresAt,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.DestinationWallet,
		&i.DestinationMint,
		&i.Amount,
		&i.Status,
		&i.Message,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPayment = `-- name: GetPayment :one
SELECT id, external_id, destination_wallet, destination_mint, amount, status, message, expires_at, created_at, updated_at FROM payments WHERE id = $1
`

func (q *Queries) GetPayment(ctx context.Context, id uuid.UUID) (Payment, error) {
	row := q.queryRow(ctx, q.getPaymentStmt, getPayment, id)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.DestinationWallet,
		&i.DestinationMint,
		&i.Amount,
		&i.Status,
		&i.Message,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPaymentByExternalID = `-- name: GetPaymentByExternalID :one
SELECT id, external_id, destination_wallet, destination_mint, amount, status, message, expires_at, created_at, updated_at FROM payments WHERE external_id = $1::VARCHAR
`

func (q *Queries) GetPaymentByExternalID(ctx context.Context, externalID string) (Payment, error) {
	row := q.queryRow(ctx, q.getPaymentByExternalIDStmt, getPaymentByExternalID, externalID)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.DestinationWallet,
		&i.DestinationMint,
		&i.Amount,
		&i.Status,
		&i.Message,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const markPaymentsExpired = `-- name: MarkPaymentsExpired :exec
UPDATE payments SET status = 'expired'::payment_status WHERE expires_at < NOW() AND status = 'new'::payment_status
`

func (q *Queries) MarkPaymentsExpired(ctx context.Context) error {
	_, err := q.exec(ctx, q.markPaymentsExpiredStmt, markPaymentsExpired)
	return err
}

const updatePaymentStatus = `-- name: UpdatePaymentStatus :one
UPDATE payments SET status = $1 WHERE id = $2 RETURNING id, external_id, destination_wallet, destination_mint, amount, status, message, expires_at, created_at, updated_at
`

type UpdatePaymentStatusParams struct {
	Status PaymentStatus `json:"status"`
	ID     uuid.UUID     `json:"id"`
}

func (q *Queries) UpdatePaymentStatus(ctx context.Context, arg UpdatePaymentStatusParams) (Payment, error) {
	row := q.queryRow(ctx, q.updatePaymentStatusStmt, updatePaymentStatus, arg.Status, arg.ID)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.DestinationWallet,
		&i.DestinationMint,
		&i.Amount,
		&i.Status,
		&i.Message,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
